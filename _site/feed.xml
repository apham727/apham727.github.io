<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2019-12-02T11:51:02-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Andrew Pham</title><subtitle>A place to hold some of my projects I've been working on
</subtitle><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><entry><title type="html">Capitalize</title><link href="http://localhost:4000/projects/2019-08-01-capitalize/" rel="alternate" type="text/html" title="Capitalize" /><published>2019-08-01T00:00:00-05:00</published><updated>2019-08-01T00:00:00-05:00</updated><id>http://localhost:4000/projects/capitalize</id><content type="html" xml:base="http://localhost:4000/projects/2019-08-01-capitalize/">&lt;p&gt;In early August, I got the chance to attend the Capital One Software Engineering Summit
in Clarendon, Virginia. During my time at the summit, I participated in a financial-service themed
hackathon, where my team developed Capitalize, a full-stack web application in Angular + Node that
allows users to find full travel packages within a specified budget. (The link to the github repo for this project can be found &lt;a href=&quot;https://github.com/apham727/Capitalize&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/overview.png&quot; alt=&quot;Design&quot; class=&quot;img-responsive&quot; /&gt;
&lt;em&gt;Capitalize Design Overview&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The frontend of Capitalize was written in Angular, while the backend was written in Node.js + Express. This allowed us to create a webservice on the backend that we could easily call from the frontend with a simple REST call.&lt;/p&gt;

&lt;p&gt;The user would first enter in their budget, category of preference, number of travelers, and length of vacation. The frontend would then compile this information and send it to the backend through the rest call. The backend would then take these parameters and aggregate data from different sites (the Yelp API, the Google Flights API, and the Amadeus API) and return a JSON array to the frontend that contains the full vacation packages as JSON objects. The frontend would then render these in the view.&lt;/p&gt;

&lt;h2 id=&quot;design-choices-and-takeaways&quot;&gt;Design Choices and Takeaways&lt;/h2&gt;
&lt;p&gt;At this point in the web application, we could have created the entire app in Angular, since it would be able to aggregate data and call external APIs itself. However, I thought it would be better to abstract it into a frontend and a backend so that in the future, both could scale more efficiently and independently.&lt;/p&gt;

&lt;p&gt;This application also was a good lesson in passing data between components in Angular. While sharing data between parent and child can be as simple as a &lt;em&gt;viewChild&lt;/em&gt;, passing data between independent components required the use of services.&lt;/p&gt;</content><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><summary type="html">In early August, I got the chance to attend the Capital One Software Engineering Summit in Clarendon, Virginia. During my time at the summit, I participated in a financial-service themed hackathon, where my team developed Capitalize, a full-stack web application in Angular + Node that allows users to find full travel packages within a specified budget. (The link to the github repo for this project can be found here). Implementation Capitalize Design Overview The frontend of Capitalize was written in Angular, while the backend was written in Node.js + Express. This allowed us to create a webservice on the backend that we could easily call from the frontend with a simple REST call. The user would first enter in their budget, category of preference, number of travelers, and length of vacation. The frontend would then compile this information and send it to the backend through the rest call. The backend would then take these parameters and aggregate data from different sites (the Yelp API, the Google Flights API, and the Amadeus API) and return a JSON array to the frontend that contains the full vacation packages as JSON objects. The frontend would then render these in the view. Design Choices and Takeaways At this point in the web application, we could have created the entire app in Angular, since it would be able to aggregate data and call external APIs itself. However, I thought it would be better to abstract it into a frontend and a backend so that in the future, both could scale more efficiently and independently. This application also was a good lesson in passing data between components in Angular. While sharing data between parent and child can be as simple as a viewChild, passing data between independent components required the use of services.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/capitalize.png" /></entry><entry><title type="html">Virtual Filesystem</title><link href="http://localhost:4000/projects/2019-03-06-virtualFilesystem/" rel="alternate" type="text/html" title="Virtual Filesystem" /><published>2019-03-06T00:00:00-06:00</published><updated>2019-03-06T00:00:00-06:00</updated><id>http://localhost:4000/projects/virtualFilesystem</id><content type="html" xml:base="http://localhost:4000/projects/2019-03-06-virtualFilesystem/">&lt;p&gt;During the later part of my time at the Rice Efficient Computing Group, I developed the virtual filesystem to expose kernel components in an organized manner and to temporarily store files. Essentially, the virtual filesystem I wrote serves as the layer between the user interface and more concrete filesystems, such as a network filesystem or the physical filesystem on disk. (The link to the github repo for this project can be found &lt;a href=&quot;https://github.com/apham727/virtual-filesystem&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;One of the most difficult (and simultaneously easiest) parts of this project was writing it in Rust. Rust has a super strict typesystem, so it made it difficult unifying the different types of files and directories across one single tree structure, and it necessitated the extensive use of pointers and type-casting. However, Rust’s memory safety guarantees allowed me to code pointer-heavy structures without fear of null-pointer errors or other memory-related bugs common to C-languages.&lt;/p&gt;

&lt;p&gt;This project also led to my first &lt;a href=&quot;https://stackoverflow.com/questions/53216593/vec-of-generics-of-different-concrete-types&quot;&gt;Stack Overflow question&lt;/a&gt;. (I ended up sticking with the Vec&amp;lt;Box&amp;lt;Node&lt;Other&gt;&amp;gt;&amp;gt; idea so that more classes could implement the Node trait in the future).&lt;/Other&gt;&lt;/p&gt;

&lt;h2 id=&quot;notes-on-implementation&quot;&gt;Notes on Implementation&lt;/h2&gt;
&lt;p&gt;The VFS project led to the development of certain common unix commands for traversing filesystems, such as &lt;em&gt;cd&lt;/em&gt;, &lt;em&gt;ls&lt;/em&gt;, &lt;em&gt;mkdir&lt;/em&gt;, &lt;em&gt;rm&lt;/em&gt;, and &lt;em&gt;pwd&lt;/em&gt;. By far the most difficult command to implement was &lt;em&gt;cd&lt;/em&gt;, which &lt;em&gt;c&lt;/em&gt;hanges &lt;em&gt;d&lt;/em&gt;irectories. It biggest reason for this was because it involved creating the logic for relative/absolute paths. It was a thorough exercise in string parsing, recursion, tree traversal, and error handling. For example, here is the &lt;em&gt;get&lt;/em&gt; function, which would return the node based on the wd (working directory) parameter:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;c&quot;&gt;/// Gets the reference to the directory specified by the path given the current working directory &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StrongAnyDirRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;'static&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_path_as_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());}&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;// Get the shortest path from self to working directory by first finding the canonical path of self then the relative path of that path to the &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.canonicalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;error!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cannot canonicalize path {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;couldn't canonicalize path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;debug!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;components {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
            &lt;span class=&quot;c&quot;&gt;// Navigate to parent directory&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_parent_dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nd&quot;&gt;error!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;failed to move up in path {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_path&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Ignore if no directory is specified &lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// Navigate to child directory&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// this checks the last item in the components to check if it's a file&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;// if no matching file is found, advances to the next match block&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shortest_path&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;..&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// FIX LATER&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.list_children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// fixes this so that it uses list_children so we don't preemptively create a bunch of TaskFile objects&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.iter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_name&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                    &lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))),&lt;/span&gt;
                                    &lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Arc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)));&lt;/span&gt;
                                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                                &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;                       
                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                               
                &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shouldn't be a file here&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
                    &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;FSNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_wd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This function wasn’t even a part of the public interface, but it was one of many helper functions that did a lot of the behind-the-scenes work for the virtual filesystem.&lt;/p&gt;

&lt;h2 id=&quot;takeaway&quot;&gt;Takeaway&lt;/h2&gt;
&lt;p&gt;Over the 4+ month-long development process, I changed the public interface at least 10 times. Every time I changed it, something would break internally and would require hours of debugging to find the error.&lt;/p&gt;

&lt;p&gt;The biggest lesson I learned from this project was to create an interface at the onset that is flexible enough to support future endeavours so that I can avoid days’ worth of debugging in the future.&lt;/p&gt;</content><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><summary type="html">During the later part of my time at the Rice Efficient Computing Group, I developed the virtual filesystem to expose kernel components in an organized manner and to temporarily store files. Essentially, the virtual filesystem I wrote serves as the layer between the user interface and more concrete filesystems, such as a network filesystem or the physical filesystem on disk. (The link to the github repo for this project can be found here). One of the most difficult (and simultaneously easiest) parts of this project was writing it in Rust. Rust has a super strict typesystem, so it made it difficult unifying the different types of files and directories across one single tree structure, and it necessitated the extensive use of pointers and type-casting. However, Rust’s memory safety guarantees allowed me to code pointer-heavy structures without fear of null-pointer errors or other memory-related bugs common to C-languages. This project also led to my first Stack Overflow question. (I ended up sticking with the Vec&amp;lt;Box&amp;lt;Node&amp;gt;&amp;gt; idea so that more classes could implement the Node trait in the future). Notes on Implementation The VFS project led to the development of certain common unix commands for traversing filesystems, such as cd, ls, mkdir, rm, and pwd. By far the most difficult command to implement was cd, which changes directories. It biggest reason for this was because it involved creating the logic for relative/absolute paths. It was a thorough exercise in string parsing, recursion, tree traversal, and error handling. For example, here is the get function, which would return the node based on the wd (working directory) parameter: /// Gets the reference to the directory specified by the path given the current working directory pub fn get(&amp;amp;self, wd: &amp;amp;StrongAnyDirRef) -&amp;gt; Result&amp;lt;FSNode, &amp;amp;'static str&amp;gt; { let current_path; { current_path = Path::new(wd.lock().get_path_as_string());} // Get the shortest path from self to working directory by first finding the canonical path of self then the relative path of that path to the let shortest_path = match self.canonicalize(&amp;amp;current_path).relative(&amp;amp;current_path) { Some(dir) =&amp;gt; dir, None =&amp;gt; { error!(&quot;cannot canonicalize path {}&quot;, current_path.path); return Err(&quot;couldn't canonicalize path&quot;); } }; let mut new_wd = Arc::clone(&amp;amp;wd); debug!(&quot;components {:?}&quot;, shortest_path.components()); let mut counter: isize = -1; for component in shortest_path.components().iter() { counter += 1; // Navigate to parent directory if component == &quot;..&quot; { let dir = match new_wd.lock().get_parent_dir() { Ok(dir) =&amp;gt; dir, Err(err) =&amp;gt; { error!(&quot;failed to move up in path {}&quot;, current_path.path); return Err(err) }, }; new_wd = dir; } // Ignore if no directory is specified else if component == &quot;&quot; { continue; } // Navigate to child directory else { // this checks the last item in the components to check if it's a file // if no matching file is found, advances to the next match block if counter as usize == shortest_path.components().len() - 1 &amp;amp;&amp;amp; shortest_path.components()[0] != &quot;..&quot; { // FIX LATER let children = new_wd.lock().list_children(); // fixes this so that it uses list_children so we don't preemptively create a bunch of TaskFile objects for child_name in children.iter() { if child_name == component { match new_wd.lock().get_child(child_name.to_string(), false) { Ok(child) =&amp;gt; match child { FSNode::File(file) =&amp;gt; return Ok(FSNode::File(Arc::clone(&amp;amp;file))), FSNode::Dir(dir) =&amp;gt; { return Ok(FSNode::Dir(Arc::clone(&amp;amp;dir))); } }, Err(err) =&amp;gt; return Err(err), }; } } } let dir = match new_wd.lock().get_child(component.clone().to_string(), false) { Ok(child) =&amp;gt; match child { FSNode::Dir(dir) =&amp;gt; dir, FSNode::File(_file) =&amp;gt; return Err(&quot;shouldn't be a file here&quot;), }, Err(err) =&amp;gt; return Err(err), }; new_wd = dir; } } return Ok(FSNode::Dir(new_wd)); } } This function wasn’t even a part of the public interface, but it was one of many helper functions that did a lot of the behind-the-scenes work for the virtual filesystem. Takeaway Over the 4+ month-long development process, I changed the public interface at least 10 times. Every time I changed it, something would break internally and would require hours of debugging to find the error. The biggest lesson I learned from this project was to create an interface at the onset that is flexible enough to support future endeavours so that I can avoid days’ worth of debugging in the future.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/vfs.png" /></entry><entry><title type="html">National Park Service Web App</title><link href="http://localhost:4000/projects/2019-02-06-nps-app/" rel="alternate" type="text/html" title="National Park Service Web App" /><published>2019-02-06T00:00:00-06:00</published><updated>2019-02-06T00:00:00-06:00</updated><id>http://localhost:4000/projects/nps-app</id><content type="html" xml:base="http://localhost:4000/projects/2019-02-06-nps-app/">&lt;p&gt;Check out the live demo &lt;a href=&quot;https://apham-nps-app.herokuapp.com&quot;&gt;here&lt;/a&gt;. The git repo for this project can be found &lt;a href=&quot;https://github.com/apham727/NPS-App&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project was done for a MindSumo challenge, where the objective was to create a web application that would serve as an information kiosk/search engine for U.S. national parks and related destinations. I used the Python-Flask framework because I had previously used it in a hackathon before and I wanted to become more proficient with it.&lt;/p&gt;

&lt;p&gt;One of the reasons this projects was so important to me was because it incorporated different ideas that I had used individually in previous projects, but not together simultaneously. This included the Google Maps API, Javascript, way too much CSS, and building an internally consistent website.&lt;/p&gt;

&lt;h2 id=&quot;notes-on-implementation&quot;&gt;Notes on Implementation&lt;/h2&gt;
&lt;p&gt;One of the hardest things in this project was preventing code duplication. I refactored several times just so that I could add more features in the future without confusing myself. Another difficult component was using the somewhat fidgety National Park Service API. It would often return empty fields (such as empty image url fields) which would require some extra error handling so that the page could render on these events.&lt;/p&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;In retrospect, I could have used Angular (which I was using for a project at work at that time) for this NPS application. I like the modularization that Angular brings and its benefits, such as distinct components in a view that can be individually updated. &lt;del&gt;With Flask, I found myself copying the navbar code across every webpage when I could have used the Angular router to only update the middle page content.&lt;/del&gt; &lt;em&gt;I just realized custom HTML tags existed :/&lt;/em&gt; However, Flask was very intuitive to use and was great for people like me without a lot of front-end experience.&lt;/p&gt;</content><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><summary type="html">Check out the live demo here. The git repo for this project can be found here. This project was done for a MindSumo challenge, where the objective was to create a web application that would serve as an information kiosk/search engine for U.S. national parks and related destinations. I used the Python-Flask framework because I had previously used it in a hackathon before and I wanted to become more proficient with it. One of the reasons this projects was so important to me was because it incorporated different ideas that I had used individually in previous projects, but not together simultaneously. This included the Google Maps API, Javascript, way too much CSS, and building an internally consistent website. Notes on Implementation One of the hardest things in this project was preventing code duplication. I refactored several times just so that I could add more features in the future without confusing myself. Another difficult component was using the somewhat fidgety National Park Service API. It would often return empty fields (such as empty image url fields) which would require some extra error handling so that the page could render on these events. Takeaways In retrospect, I could have used Angular (which I was using for a project at work at that time) for this NPS application. I like the modularization that Angular brings and its benefits, such as distinct components in a view that can be individually updated. With Flask, I found myself copying the navbar code across every webpage when I could have used the Angular router to only update the middle page content. I just realized custom HTML tags existed :/ However, Flask was very intuitive to use and was great for people like me without a lot of front-end experience.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/npsapp.png" /></entry><entry><title type="html">Terminal Emulator/CLI</title><link href="http://localhost:4000/projects/2018-08-18-terminal-emulator/" rel="alternate" type="text/html" title="Terminal Emulator/CLI" /><published>2018-08-18T00:00:00-05:00</published><updated>2018-08-18T00:00:00-05:00</updated><id>http://localhost:4000/projects/terminal-emulator</id><content type="html" xml:base="http://localhost:4000/projects/2018-08-18-terminal-emulator/">&lt;p&gt;The code for the terminal can be found &lt;a href=&quot;https://github.com/apham727/terminal-emulator&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The terminal was my first major project in Rust as part of the Rice Efficient Computing Group. My objective was to create a unix-like terminal to allow users to run commands/applications in the operating system.&lt;/p&gt;

&lt;h1 id=&quot;starting-out&quot;&gt;Starting Out&lt;/h1&gt;
&lt;p&gt;I had available three libraries (or “crates” in Rust):&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;library to capture keypresses&lt;/li&gt;
  &lt;li&gt;library to display text to a display buffer&lt;/li&gt;
  &lt;li&gt;library to run kernel tasks&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;stages-of-implementation&quot;&gt;Stages of Implementation&lt;/h1&gt;
&lt;p&gt;I began by creating the functionality to run commands in the kernel. Using the 3rd library, I wrote a function to validate an input against existing commands and then execute the preset command upon validation.&lt;/p&gt;

&lt;p&gt;With this functionality in place, I moved to emulating terminal behavior. This involved recording user input, tracking/resetting prompts, mapping keypresses to certain actions, and echoing keypresses back to the terminal. It resulted in a very rudimentary terminal; however, the code was extremely messy and confusing. As a result, I added in the idea of standard input/output in the terminal for greater orthogonality.&lt;/p&gt;

&lt;p&gt;The final major stage was to beef up the terminal. I implemented a few common unix commands, better error handling, and some other features you would find in an everyday terminal like command history.&lt;/p&gt;

&lt;h1 id=&quot;notes&quot;&gt;Notes&lt;/h1&gt;
&lt;p&gt;The most difficult part in the early stages of the terminal was working with raw strings. Since at the end of the day, the display buffer only displayed the raw string that was passed to it, I had to meticulously index the display string to prevent out-of-bounds and overlap errors.&lt;/p&gt;

&lt;p&gt;Another concern that arose in the later stages of development was the separation between external libraries and internal components and commands. Take the &lt;em&gt;ls&lt;/em&gt; command, for example. It would make sense to put &lt;em&gt;ls&lt;/em&gt; as a separate application in a different crate than the terminal, but that would also incur large overheads everytime the command was invoked (because the kernel has to start a new process and context switch). However, leaving the logic inside the terminal would bloat the code. 
For decisions like this, we would bias towards externalizing a lot of this logic for the sake of maintainability.&lt;/p&gt;

&lt;h1 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h1&gt;
&lt;p&gt;Real-time input handling is hard. For example, this was the code that redirected keypresses and ran built-in functions.&lt;/p&gt;
&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// Handle cursor blink&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.window&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_displayable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;text_display&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.cursor_blink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FONT_COLOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BACKGROUND_COLOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;// Handles events from the print queue. The queue is &quot;empty&quot; is peek() returns None&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// If it is empty, it passes over this conditional&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.print_consumer&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.peek&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_event&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.deref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OutputEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.push_to_stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.text&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

                    &lt;span class=&quot;c&quot;&gt;// Sets this bool to true so that on the next iteration the TextDisplay will refresh AFTER the &lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// task_handler() function has cleaned up, which does its own printing to the console&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.refresh_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.correct_prompt_position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;print_event&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.mark_completed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Goes to the next iteration of the loop after processing print event to ensure that printing is handled before keypresses&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 


        &lt;span class=&quot;c&quot;&gt;// Handles the cleanup of any application task that has finished running, including refreshing the display&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.task_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.correct_prompt_position&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.redisplay_prompt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.correct_prompt_position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;c&quot;&gt;// Looks at the input queue from the window manager&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// If it has unhandled items, it handles them with the match&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// If it is empty, it proceeds directly to the next loop iteration&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.window&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.get_key_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;ev&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// Returns from the main loop so that the terminal object is dropped&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ExitEvent&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;trace!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exited terminal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;window_manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(());&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nn&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ResizeEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_rev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.refresh_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// application refreshes display after resize event is received&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;c&quot;&gt;// Handles ordinary keypresses&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;InputEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.handle_key_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_event&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_event&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.key_event.action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;KeyAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pressed&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;c&quot;&gt;// only refreshes the display on keypresses to improve display performance &lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;terminal&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.refresh_display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;display_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I learned to be careful about what functions I was calling in this loop to prevent “keypress lag”, because each 
iteration of this loop would track a single keypress. It was a good exercise in writing efficient code!&lt;/p&gt;</content><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><summary type="html">The code for the terminal can be found here. The terminal was my first major project in Rust as part of the Rice Efficient Computing Group. My objective was to create a unix-like terminal to allow users to run commands/applications in the operating system. Starting Out I had available three libraries (or “crates” in Rust): library to capture keypresses library to display text to a display buffer library to run kernel tasks Stages of Implementation I began by creating the functionality to run commands in the kernel. Using the 3rd library, I wrote a function to validate an input against existing commands and then execute the preset command upon validation. With this functionality in place, I moved to emulating terminal behavior. This involved recording user input, tracking/resetting prompts, mapping keypresses to certain actions, and echoing keypresses back to the terminal. It resulted in a very rudimentary terminal; however, the code was extremely messy and confusing. As a result, I added in the idea of standard input/output in the terminal for greater orthogonality. The final major stage was to beef up the terminal. I implemented a few common unix commands, better error handling, and some other features you would find in an everyday terminal like command history. Notes The most difficult part in the early stages of the terminal was working with raw strings. Since at the end of the day, the display buffer only displayed the raw string that was passed to it, I had to meticulously index the display string to prevent out-of-bounds and overlap errors. Another concern that arose in the later stages of development was the separation between external libraries and internal components and commands. Take the ls command, for example. It would make sense to put ls as a separate application in a different crate than the terminal, but that would also incur large overheads everytime the command was invoked (because the kernel has to start a new process and context switch). However, leaving the logic inside the terminal would bloat the code. For decisions like this, we would bias towards externalizing a lot of this logic for the sake of maintainability. Takeaways Real-time input handling is hard. For example, this was the code that redirected keypresses and ran built-in functions. loop { // Handle cursor blink if let Some(text_display) = terminal.window.get_displayable(&amp;amp;display_name){ text_display.cursor_blink(&amp;amp;(terminal.window), FONT_COLOR, BACKGROUND_COLOR); } // Handles events from the print queue. The queue is &quot;empty&quot; is peek() returns None // If it is empty, it passes over this conditional if let Some(print_event) = terminal.print_consumer.peek() { match print_event.deref() { &amp;amp;Event::OutputEvent(ref s) =&amp;gt; { terminal.push_to_stdout(s.text.clone()); // Sets this bool to true so that on the next iteration the TextDisplay will refresh AFTER the // task_handler() function has cleaned up, which does its own printing to the console terminal.refresh_display(&amp;amp;display_name); terminal.correct_prompt_position = false; }, _ =&amp;gt; { }, } print_event.mark_completed(); // Goes to the next iteration of the loop after processing print event to ensure that printing is handled before keypresses continue; } // Handles the cleanup of any application task that has finished running, including refreshing the display terminal.task_handler()?; if !terminal.correct_prompt_position { terminal.redisplay_prompt(); terminal.correct_prompt_position = true; } // Looks at the input queue from the window manager // If it has unhandled items, it handles them with the match // If it is empty, it proceeds directly to the next loop iteration let event = match terminal.window.get_key_event() { Some(ev) =&amp;gt; { ev }, _ =&amp;gt; { continue; } }; match event { // Returns from the main loop so that the terminal object is dropped Event::ExitEvent =&amp;gt; { trace!(&quot;exited terminal&quot;); window_manager::delete(terminal.window)?; return Ok(()); } Event::ResizeEvent(ref _rev) =&amp;gt; { terminal.refresh_display(&amp;amp;display_name); // application refreshes display after resize event is received } // Handles ordinary keypresses Event::InputEvent(ref input_event) =&amp;gt; { terminal.handle_key_event(input_event.key_event, &amp;amp;display_name)?; if input_event.key_event.action == KeyAction::Pressed { // only refreshes the display on keypresses to improve display performance terminal.refresh_display(&amp;amp;display_name); } } _ =&amp;gt; { } } I learned to be careful about what functions I was calling in this loop to prevent “keypress lag”, because each iteration of this loop would track a single keypress. It was a good exercise in writing efficient code!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/terminal.png" /></entry><entry><title type="html">Route Destination Finder</title><link href="http://localhost:4000/projects/2018-01-05-routeFinder/" rel="alternate" type="text/html" title="Route Destination Finder" /><published>2018-01-05T00:00:00-06:00</published><updated>2018-01-05T00:00:00-06:00</updated><id>http://localhost:4000/projects/routeFinder</id><content type="html" xml:base="http://localhost:4000/projects/2018-01-05-routeFinder/">&lt;p&gt;The git repo for this project can be found &lt;a href=&quot;https://github.com/apham727/FindAlongRoute&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When my family and I were driving to Colorado back when I was ten, I remember my mom asking where the nearest gas station was and me thinking that it would be really convenient if Google Maps allowed me to search for gas stations along our current route. That inspired this project, though Google Maps later implemented this feature anyways.&lt;/p&gt;

&lt;p&gt;The purpose of this application is to find gas stations, restaurants, etc. along a route within a specified distance from the route. It uses the Python-Flask web framework to serve the application.&lt;/p&gt;

&lt;h2 id=&quot;challenges&quot;&gt;Challenges&lt;/h2&gt;
&lt;p&gt;One of the challenges I faced was that the Google Maps API put a query per second limit on calls to its service. I originally tried to query the Maps API for destinations at small, preset increments along the route, but I ran into the aforementioned query limit. As a workaround, I queried the Google Maps API at 20 equally spaced intervals around the route with a radius backwards-calculated from the user-specified distance. I then calculated the shortest distance from any location from the route to ensure it was less than the user-specified distance.&lt;/p&gt;

&lt;p&gt;In this process, I learned about the haversine distance, which is the shortest distance between two objects on a globe. The javascript function I used is shown below:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;haversine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lon1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lon2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6371&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// km&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dLat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toRad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dLon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toRad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lon2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lon1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lat1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toRad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lat2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;toRad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
          &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dLon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h2&gt;
&lt;p&gt;This project was a solid exercise in making workarounds to external factors that were out of my control (or more precisely, that I wasn’t willing to pay for). It was also my first introduction to Javascript.&lt;/p&gt;</content><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><summary type="html">The git repo for this project can be found here. When my family and I were driving to Colorado back when I was ten, I remember my mom asking where the nearest gas station was and me thinking that it would be really convenient if Google Maps allowed me to search for gas stations along our current route. That inspired this project, though Google Maps later implemented this feature anyways. The purpose of this application is to find gas stations, restaurants, etc. along a route within a specified distance from the route. It uses the Python-Flask web framework to serve the application. Challenges One of the challenges I faced was that the Google Maps API put a query per second limit on calls to its service. I originally tried to query the Maps API for destinations at small, preset increments along the route, but I ran into the aforementioned query limit. As a workaround, I queried the Google Maps API at 20 equally spaced intervals around the route with a radius backwards-calculated from the user-specified distance. I then calculated the shortest distance from any location from the route to ensure it was less than the user-specified distance. In this process, I learned about the haversine distance, which is the shortest distance between two objects on a globe. The javascript function I used is shown below: function haversine(lat1, lon1, lat2, lon2) { var R = 6371; // km var dLat = toRad(lat2-lat1); var dLon = toRad(lon2-lon1); var lat1 = toRad(lat1); var lat2 = toRad(lat2); var a = Math.sin(dLat/2) * Math.sin(dLat/2) + Math.sin(dLon/2) * Math.sin(dLon/2) * Math.cos(lat1) * Math.cos(lat2); var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); var d = R * c; return d; } Takeaways This project was a solid exercise in making workarounds to external factors that were out of my control (or more precisely, that I wasn’t willing to pay for). It was also my first introduction to Javascript.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/routefinder.png" /></entry><entry><title type="html">Recycle Wat-son?</title><link href="http://localhost:4000/projects/2017-09-13-recyclewatson/" rel="alternate" type="text/html" title="Recycle Wat-son?" /><published>2017-09-13T00:00:00-05:00</published><updated>2017-09-13T00:00:00-05:00</updated><id>http://localhost:4000/projects/recyclewatson</id><content type="html" xml:base="http://localhost:4000/projects/2017-09-13-recyclewatson/">&lt;p&gt;The github repo for this project can be found &lt;a href=&quot;https://github.com/apham727/RecycleWatson&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project was developed during my first hackathon as a freshman at Rice University. The app was created using the Python-Flask framework. It’s purpose was to classify images using IBM watson to determine if the primary object in that image was recycleable.&lt;/p&gt;

&lt;p&gt;We empirically developed a attribute weighting system that would lead to the highest accuracy in image classification.&lt;/p&gt;</content><author><name>Andrew Pham</name><email>apham@rice.edu</email></author><summary type="html">The github repo for this project can be found here. This project was developed during my first hackathon as a freshman at Rice University. The app was created using the Python-Flask framework. It’s purpose was to classify images using IBM watson to determine if the primary object in that image was recycleable. We empirically developed a attribute weighting system that would lead to the highest accuracy in image classification.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/img/recyclewatson.png" /></entry></feed>